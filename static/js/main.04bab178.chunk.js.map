{"version":3,"sources":["store/musicRedux.js","utils/GenUtil.js","component/MusicSec.js","store/configureStore.js","component/TranscriptSec.js","constants/Constants.js","content/WaveLine.js","component/MovingLine.js","component/Waveform.js","component/SearchTranscript.js","component/SearchedTranscript.js","App.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","play","seconds","second","dSeconds","minutes","timerId","speed","searched","search","reducers","played","state","action","paused","timer","payload","ended","listened","sec","dSec","Math","floor","set","seco","dse","forwarded","rewinded","speeding","parseFloat","searching","cleared","actions","GenUtil","getNumericalTime","time","length","getFormatDateTime","MusicSec","audioFile","useContext","DurationContext","duration","setDuration","dispatch","useDispatch","useSelector","audioRef","useRef","useEffect","current","audio","currentTime","durationMinute","durationSecond","container","button","childNodes","style","display","outline","preload","onloadedmetadata","round","removeChild","forwardButton","document","createElement","forwardButtonImg","src","width","addEventListener","event","target","cursor","appendChild","onclick","rewindButton","rewindButtonImg","insertBefore","speedButton","classList","add","o4","value","innerText","o","o1","o2","o3","oninput","e","shareButton","parentElement","color","className","onPlay","setInterval","onPause","clearInterval","onEnded","onListen","ref","marginBottom","configureStore","reducer","TranscriptSec","transcripts","TranscriptContext","useState","share","setShare","word_timings","map","personPara","index","key","startTime","word","i","onClick","ti","s","ds","ceil","setTimeout","onAudio","endTime","backgroundColor","Constants","WidthConstant","WaveLine","props","EndTime","maxWidth","a","borderLeft","colour","MovingLine","percent","setPercent","audioTime","nativeEvent","offsetX","dSecond","Waveform","transcriptLength","total","j","first","m","n","firstPercent","secondPercent","memory","getFirstWavelineMargin","st","memory2","getSecondWavelineMargin","fontSize","paddingLeft","position","top","left","transcript","borderBottom","marginLeft","SearchTranscript","searchValue","setSearchValue","searchString","result","setResult","result1","toLowerCase","includes","onSubmit","preventDefault","placeholder","onChange","SearchedTranscript","transcript_text","minHeight","classnames","React","createContext","subscribe","console","log","App","Provider","Boolean","window","location","hostname","match","store","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"82EAEMA,EAAQC,YAAY,CACtBC,KAAM,QACNC,aAAc,CACVC,MAAM,EACNC,QAAS,EACTC,OAAQ,EACRC,SAAU,EACVC,QAAS,EACTC,QAAS,EACTC,MAAO,IACPC,UAAU,EACVC,OAAQ,IAEZC,SAAU,CACNC,OAAQ,SAACC,EAAOC,GACZD,EAAMX,MAAO,GAEjBa,OAAQ,SAACF,EAAOC,GACZD,EAAMX,MAAO,GAEjBc,MAAO,SAACH,EAAOC,GACPD,EAAMR,UAAY,MAElBQ,EAAMV,QAAUU,EAAMV,QAAU,EAChCU,EAAMT,OAASS,EAAMT,OAAS,EAC9BS,EAAMR,SAAW,GAEjBQ,EAAMT,OAAS,KACfS,EAAMP,QAAUO,EAAMP,QAAU,EAChCO,EAAMT,OAAS,GAEnBS,EAAMR,SAAWQ,EAAMR,SAAWQ,EAAML,OAE5CD,QAAS,SAACM,EAAOC,GACbD,EAAMN,QAAUO,EAAOG,SAE3BC,MAAO,SAACL,EAAOC,GACXD,EAAMV,QAAU,EAChBU,EAAMR,SAAW,GAErBc,SAAU,SAACN,EAAOC,GACVD,EAAMV,UAAYW,EAAOG,QAAQG,KAAOP,EAAMR,WAAaS,EAAOG,QAAQI,OAC1ER,EAAMV,QAAUW,EAAOG,QAAQG,IAC/BP,EAAMR,SAAWiB,KAAKC,MAA4B,IAAtBT,EAAOG,QAAQI,QAGnDG,IAAK,SAACX,EAAOC,GACTD,EAAMV,QAAUW,EAAOG,QAAQQ,KAC/BZ,EAAMR,SAAWS,EAAOG,QAAQS,KAEpCC,UAAW,SAACd,EAAOC,GACfD,EAAMV,QAAUU,EAAMV,QAAU,IAEpCyB,SAAU,SAACf,EAAOC,GACdD,EAAMV,QAAUU,EAAMV,QAAU,GAC5BU,EAAMV,QAAU,IAChBU,EAAMV,QAAU,IAGxB0B,SAAU,SAAChB,EAAOC,GACdD,EAAML,MAAQ,IAAMsB,WAAWhB,EAAOG,UAE1Cc,UAAW,SAAClB,EAAOC,GACfD,EAAMJ,UAAW,EACjBI,EAAMH,OAASI,EAAOG,SAE1Be,QAAS,SAACnB,EAAOC,GACbD,EAAMH,OAAS,GACfG,EAAMJ,UAAW,M,EAI4FX,EAAMmC,QAAjHrB,E,EAAAA,OAAQG,E,EAAAA,OAAQR,E,EAAAA,QAASS,E,EAAAA,MAAOE,E,EAAAA,MAAOC,E,EAAAA,SAAUK,E,EAAAA,IAAKG,E,EAAAA,UAAWC,E,EAAAA,SAAUC,E,EAAAA,SAAUE,E,EAAAA,UAAWC,E,EAAAA,QAC/FlC,IAAf,Q,cCzEqBoC,E,kCAAAA,EACVC,iBAAmB,SAACC,GACvB,OAAON,WAAWM,EAAKtC,MAAM,EAAGsC,EAAKC,OAAS,KAFjCH,EAKVI,kBAAoB,SAAChC,EAASH,GACjC,MAAM,GAAN,OAAUG,EAAV,YAAqBH,EAAU,EAAIA,EAAU,IAAMA,ICA3D,IA6JeoC,EA7JE,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EACEC,qBAAWC,GAApCC,EADuB,EACvBA,SAAUC,EADa,EACbA,YACXC,EAAWC,cACX9B,EAAQ+B,aAAY,SAAClC,GAAD,OAAWA,EAAMN,WACrCJ,EAAU4C,aAAY,SAAClC,GAAD,OAAWA,EAAMV,WACvCE,EAAW0C,aAAY,SAAClC,GAAD,OAAWA,EAAMR,YACxCC,EAAUyC,aAAY,SAAClC,GAAD,OAAWA,EAAMP,WACvC8B,EAAOjC,EAAUE,EAAW,IAC5B2C,EAAWC,iBAAO,MAGxBC,qBAAU,WACNF,EAASG,QAAQC,MAAMD,QAAQE,YAAcjB,IAC9C,CAACA,IAGJ,IAAMkB,EAAiBhC,KAAKC,MAAMoB,EAAW,IACvCY,EAAiBZ,EAAW,GAsGlC,OAlGAO,qBAAU,WAEN,IAAIM,EAAYR,EAASG,QAAQK,UAAUL,QACvCC,EAAQJ,EAASG,QAAQC,MAAMD,QAC/BM,EAAST,EAASG,QAAQK,UAAUL,QAAQO,WAAW,GAAGA,WAAW,GAAGA,WAAW,GACvFF,EAAUE,WAAW,GAAGA,WAAW,GAAGC,MAAMC,QAAU,OACtDJ,EAAUE,WAAW,GAAGA,WAAW,GAAGA,WAAW,GAAGC,MAAMC,QAAU,OACpEJ,EAAUE,WAAW,GAAGA,WAAW,GAAGA,WAAW,GAAGC,MAAMC,QAAU,OACpEJ,EAAUG,MAAME,QAAU,OAC1BT,EAAMU,QAAU,WAChBV,EAAMW,iBAAmB,WACrBnB,EAAYtB,KAAK0C,MAAMZ,EAAMT,YAEjCc,EAAOQ,YAAYR,EAAOC,WAAW,IACrCD,EAAOQ,YAAYR,EAAOC,WAAW,IAKrC,IAAIQ,EAAgBC,SAASC,cAAc,OACvCC,EAAmBF,SAASC,cAAc,OAC9CC,EAAiBC,IAAM,gDACvBD,EAAiBV,MAAMY,MAAQ,OAC/BL,EAAcM,iBAAiB,aAAa,SAAUC,GAClDA,EAAMC,OAAOf,MAAMgB,OAAS,aAEhCT,EAAcU,YAAYP,GAC1BZ,EAAOmB,YAAYV,GACnBA,EAAcW,QAAU,kBAAMhC,EAASZ,MAKvC,IAAI6C,EAAeX,SAASC,cAAc,OACtCW,EAAkBZ,SAASC,cAAc,OAC7CW,EAAgBT,IAAM,+CACtBS,EAAgBpB,MAAMY,MAAQ,OAC9BO,EAAaN,iBAAiB,aAAa,SAAUC,GACjDA,EAAMC,OAAOf,MAAMgB,OAAS,aAEhCG,EAAaF,YAAYG,GACzBtB,EAAOuB,aAAaF,EAAcrB,EAAOC,WAAW,IACpDoB,EAAaD,QAAU,kBAAMhC,EAASZ,MAMtC,IAAIgD,EAAcd,SAASC,cAAc,UACzCa,EAAYC,UAAUC,IAAI,aAC1B,IAAMC,EAAKjB,SAASC,cAAc,UAClCgB,EAAGC,MAAQ,MACXD,EAAGE,UAAY,QACf,IAAMC,EAAIpB,SAASC,cAAc,UACjCmB,EAAEF,MAAQ,IACVE,EAAED,UAAY,QACd,IAAME,EAAKrB,SAASC,cAAc,UAClCoB,EAAGH,MAAQ,OACXG,EAAGF,UAAY,QACf,IAAMG,EAAKtB,SAASC,cAAc,UAClCqB,EAAGJ,MAAQ,MACXI,EAAGH,UAAY,QACf,IAAMI,EAAKvB,SAASC,cAAc,UAClCsB,EAAGL,MAAQ,MACXK,EAAGJ,UAAY,QACfL,EAAYL,YAAYW,GACxBN,EAAYL,YAAYQ,GACxBH,EAAYL,YAAYY,GACxBP,EAAYL,YAAYa,GACxBR,EAAYL,YAAYc,GACxBT,EAAYU,QAAU,SAACC,GAAD,OAAO/C,EAASZ,EAAiB2D,EAAElB,OAAOW,SAChEJ,EAAYT,iBAAiB,aAAa,SAAUoB,GAChDA,EAAElB,OAAOf,MAAMgB,OAAS,aAE5BlB,EAAOmB,YAAYK,GAMnB,IAAIY,EAAc1B,SAASC,cAAc,OACzCyB,EAAYvB,IAAM,yCAClBuB,EAAYrB,iBAAiB,aAAa,SAAUoB,GAChDA,EAAElB,OAAOf,MAAMgB,OAAS,aAE5BlB,EAAOqC,cAAclB,YAAYiB,GAGjCpC,EAAOC,WAAW,GAAGA,WAAW,GAAGC,MAAMoC,MAAQ,UACjDtC,EAAOC,WAAW,GAAGC,MAAME,QAAU,SAItC,IAMC,yBAAKmC,UAAU,0BACX,kBAAC,IAAD,CACI1B,IAAK9B,EACLyD,OAAQ,WACJ,IAAM1F,EAAU2F,aAAY,kBAAMrD,EAASZ,OAAkB,KAC7DY,EAASZ,KACTY,EAASZ,EAAgB1B,KAE7B4F,QAAS,WACLC,cAAcpF,GACd6B,EAASZ,MAEboE,QAAS,WACLD,cAAcpF,GACd6B,EAASZ,MAIbqE,SAAU,SAACV,GACP/C,EACIZ,EAAiB,CACbb,IAAKE,KAAKC,MAAMqE,EAAElB,OAAOrB,aACzBhC,KAAMuE,EAAElB,OAAOrB,YAAc/B,KAAKC,MAAMqE,EAAElB,OAAOrB,iBAI7DkD,IAAKvD,EACLW,MAAO,CAAC6C,aAAc,UAE1B,0BACIR,UAAU,aAAa9D,EAAQI,kBAAkBhC,EAASH,GAD9D,MAC2E+B,EAAQI,kBAAkBgB,EAAgBC,MC3JlH,aACX,OAAOkD,YAAe,CAACC,aCqEZC,EAlEO,WAClB,IAAM9D,EAAWC,cACX8D,EAAcnE,qBAAWoE,GAKzBzE,EAHUW,aAAY,SAAClC,GAAD,OAAWA,EAAMV,WAC5B4C,aAAY,SAAClC,GAAD,OAAWA,EAAMR,YAEZ,IAPV,EAQEyG,oBAAS,GARX,mBAQjBC,EARiB,KAQVC,EARU,KASlBxF,EAAM,kBAAMwF,GAAS,IAiB3B,OACI,yBAAKhB,UAAU,6BACVY,EAAYK,aAAaC,KAAI,SAACC,EAAYC,GAAb,OAE1B,yBAAKpB,UAAS,qCAAgCoB,EAAQ,EAAI,OAAS,IAAMC,IAAKD,GAC1E,0BAAMpB,UAAWoB,EAAQ,EAAI,gBAAkB,gBAA/C,KAEK9F,KAAKC,MAAMW,EAAQC,iBAAiBgF,EAAW,GAAGG,YAAc,EAC3DhG,KAAKC,MAAMW,EAAQC,iBAAiBgF,EAAW,GAAGG,YAClD,IAAMhG,KAAKC,MAAMW,EAAQC,iBAAiBgF,EAAW,GAAGG,YAAa,KAE/E,0BAAMtB,UAAU,4BAEhB,0BAAMA,UAAS,yBAAoBoB,EAAQ,EAAI,aAAe,KAC3DD,EAAWD,KAAI,SAACK,EAAMC,GAAP,OACZ,0BAAMC,QAAS,kBA7BrB,SAACC,GAEb,IAAMC,EAAIrG,KAAKC,MAAMW,EAAQC,iBAAiBuF,IACxCE,EAGE,IAFJtG,KAAKuG,KAC2E,IAA3E3F,EAAQC,iBAAiBuF,GAAMpG,KAAKC,MAAMW,EAAQC,iBAAiBuF,MAE5E7E,EAASZ,EAAY,CAACR,KAAMkG,EAAGjG,IAAKkG,KAEpCZ,GAAS,GACTc,WAAWtG,EAAK,KAmBuBuG,CAAQR,EAAKD,YAAYD,IAAKG,GAClDpF,GAAQF,EAAQC,iBAAiBoF,EAAKD,YACvClF,EAAOF,EAAQC,iBAAiBoF,EAAKS,SACjC,uBAAGhC,UAAW,QACd,0BAAMrC,MAAO,CAACsE,gBAAiB,cAC5BV,EAAKA,MACA,KAGR,uBAAGvB,UAAU,QACT,8BAAOuB,EAAKA,MAAa,SAMlCR,EAAQ,yBAAKf,UAAU,SAAf,SAAqC,YChEjDkC,E,kCAAAA,EACVC,cAAgB,ICK3B,IA0CeC,EA1CE,SAACC,GACd,IAAkBf,EAAWgB,EASvBlG,EAHUW,aAAY,SAAClC,GAAD,OAAWA,EAAMV,WAC5B4C,aAAY,SAAClC,GAAD,OAAWA,EAAMR,YAEZ,IAVV,EAWQoC,qBAAWC,GAApCC,EAXiB,EAWjBA,SAXiB,EAWPC,YAGjB,OACI,yBACIoD,UAAU,sBACVrC,MAAO,CACH4E,UAjBMjB,EAiBae,EAAMf,UAjBRgB,EAiBmBD,EAAML,SAf9C9F,EAAQC,iBAAiBmG,GAAWpG,EAAQC,iBAAiBmF,IACxD3E,EAAYuF,EAAUC,cACpB,QAQH,CAAC,EAAG,EAAG,EAAG,EAAG,GAQZjB,KAAI,SAACsB,EAAGpB,GAAJ,OACL,0BAAMC,IAAKD,GAChBhF,EAAQF,EAAQC,iBAAiBkG,EAAMf,WAAcF,EAAQ,GAEtD,yBAAKpB,UAAU,WACVqB,IAAKmB,IAGV,yBAAKxC,UAAU,WACXrC,MAAO,CACH8E,WAAW,aAAD,OAAeJ,EAAMK,SAEnCrB,IAAKmB,UCIZG,EArCI,WAAO,IAAD,EACWlG,qBAAWC,GAApCC,EADc,EACdA,SACDE,GAFe,EACJD,YACAE,eAFI,EAISgE,mBAAS,GAJlB,mBAId8B,EAJc,KAILC,EAJK,KASfzG,EAHUW,aAAY,SAAClC,GAAD,OAAWA,EAAMV,WAC5B4C,aAAY,SAAClC,GAAD,OAAWA,EAAMR,YAEZ,IAElC6C,qBAAU,WAEN2F,EADiBzG,EAAOO,EAAY,IACf,OACtB,CAACP,IAUJ,OACI,yBAAK4D,UAAU,wBACVyB,QATW,SAAC7B,GACjB,IACMkD,EADWlD,EAAEmD,YAAYC,QAAUd,EAAUC,cACtBxF,EACvBvC,EAASkB,KAAKC,MAAMuH,GACpBG,EAAiE,IAAvD3H,KAAK0C,MAA4C,IAArC8E,EAAYxH,KAAKC,MAAMuH,KACnDjG,EAASZ,EAAY,CAACR,KAAMrB,EAAQsB,IAAKuH,OAMrC,yBAAKjD,UAAU,cACVrC,MAAO,CACHY,MAAOqE,OC8FbM,EA3HE,WAUb,IAVoB,IAAD,EACazG,qBAAWC,GAApCC,EADY,EACZA,SACDiE,GAFa,EACFhE,YACGH,qBAAWoE,IAMzBsC,EAAmBvC,EAAYK,aAAa5E,OAC9C+G,EAAQ,EACH5B,EAAI,EAAGA,EAAI2B,EAAkB3B,IAClC,IAAK,IAAI6B,EAAI,EAAGA,EAAIzC,EAAYK,aAAaO,GAAGnF,OAAQgH,IACpDD,GAAgB,EAKxB,IADA,IAAIE,EAAQ,EACHC,EAAI,EAAGA,EAAIJ,EAAkBI,IAClC,GAAIA,EAAI,GAAK,EACT,IAAK,IAAIC,EAAI,EAAGA,EAAI5C,EAAYK,aAAasC,GAAGlH,OAAQmH,IACpDF,GAAgB,EAK5B,IAAMG,EAAenI,KAAK0C,MACrBsF,EAAQF,EAAS,KAEhBM,EAAgB,IAAMD,EAIxBE,EAAS,EACPC,EAAyB,SAACtC,EAAWU,GACvC,IAAI6B,EAIJ,OAFAA,EAAM3H,EAAQC,iBAAiBmF,GAAaY,EAAUC,cAAiBxF,EAAWgH,EAAS,EAC3FA,EAAUzH,EAAQC,iBAAiB6F,GAAWE,EAAUC,cAAiBxF,EAClEkH,EAAK,MAMZC,EAAU,EACRC,EAA0B,SAACzC,EAAWU,GACxC,IAAI6B,EAIJ,OAFAA,EAAM3H,EAAQC,iBAAiBmF,GAAaY,EAAUC,cAAiBxF,EAAWmH,EAAU,EAC5FA,EAAW5H,EAAQC,iBAAiB6F,GAAWE,EAAUC,cAAiBxF,EACnEkH,EAAK,MAGhB,OACI,yBAAK7D,UAAW,YAAarC,MAAO,CAACqG,SAAU,OAAQzF,MAAO,QAC1D,yBAAKZ,MAAO,CAACsG,YAAa,UACtB,0BAAMtG,MAAO,CAACoC,MAAO,eAAgBmE,SAAU,WAAYC,IAAK,QAASC,KAAM,SAAUX,EAAzF,UACA,0BAAM9F,MAAO,CACToC,MAAO,OACPmE,SAAU,WACVC,IAAK,QACLC,KAAM,SACNV,EALJ,YAMC9C,EAAYK,aAAaC,KAAI,SAACmD,EAAYjD,GAAb,OAC1B,yBAAKC,IAAKD,GACLA,EAAQ,GAAK,EACV,yBACIpB,UAAW,gBACXrC,MAAO,CAAC2G,aAAc,oBAAqB/B,SAAUL,EAAUC,cAAevE,QAAS,SAEtFyG,EAAWnD,KAAI,SAACK,EAAMH,GAAP,OACZ,yBACIzD,MAAO,CACH4G,WAAYX,EACRrC,EAAKD,UACLC,EAAKS,SAETpE,QAAS,QAEbyD,IAAKD,GAEL,kBAAC,EAAD,CACIE,UAAWC,EAAKD,UAChBU,QAAST,EAAKS,QACdU,OAAQ,sBAMxB,yBAAK1C,UAAW,iBAAkBrC,MAAO,CAACC,QAAS,SAC9CyG,EAAWnD,KAAI,SAACK,EAAMH,GAAP,OACZ,yBACIzD,MAAO,CACH4G,WAAYR,EACRxC,EAAKD,UACLC,EAAKS,SAETpE,QAAS,QAEbyD,IAAKD,GAEL,kBAAC,EAAD,CACIE,UAAWC,EAAKD,UAChBU,QAAST,EAAKS,QACdU,OAAQ,mBAaxC,kBAAC,EAAD,Q,QCnEG8B,EArDU,WACrB,IAAM3H,EAAWC,cACXpC,EAASqC,aAAY,SAAClC,GAAD,OAAWA,EAAMJ,YAFjB,EAGWqG,mBAAS,IAHpB,mBAGpB2D,EAHoB,KAGPC,EAHO,KAIrBC,EAAe5H,aAAY,SAAClC,GAAD,OAAWA,EAAMH,UAC5CkG,EAAcnE,qBAAWoE,GALJ,EAMCC,mBAAS,GANV,mBAMpB8D,EANoB,KAMZC,EANY,KAmB3B,OAXA3H,qBAAU,WAEN,IADA,IAAI4H,EAAU,EACLtD,EAAI,EAAGA,EAAIZ,EAAYK,aAAa5E,OAAQmF,IACjD,IAAK,IAAI6B,EAAI,EAAGA,EAAIzC,EAAYK,aAAaO,GAAGnF,OAAQgH,IAChDzC,EAAYK,aAAaO,GAAG6B,GAAG9B,KAAKwD,cAAcC,SAASL,EAAaI,iBACxED,GAAoB,GAIhCD,EAAUC,KACX,CAACH,IAEA,yBAAK3E,UAAU,qBACX,0BACIiF,SAAU,SAACrF,GACPA,EAAEsF,iBACFrI,EAASZ,EAAkBwI,EAAYM,kBAG3C,2BACI/E,UAAU,eACVmF,YAAa,yBACbC,SAAU,SAACxF,GAAD,OAAO8E,EAAe9E,EAAElB,OAAOW,QACzCA,MAAOoF,KAGf,yBACIzE,UAAU,cACV1B,IAAK,iDAER5D,EACG,0BAAMsF,UAAU,eACrB4E,EADK,WAEN,0BACInD,QAAS,kBAAM5E,EAASZ,MACxB+D,UAAU,gBAEX,IAJH,iBAOM,O,iBCTDqF,EAtCY,WACvB,IAAMV,EAAe5H,aAAY,SAAAlC,GAAK,OAAIA,EAAMH,UAC1CkG,EAAcnE,qBAAWoE,GAE/B,OACI,yBAAKb,UAAW,4BACXY,EAAYK,aAAaC,KAAI,SAACC,EAAYC,GAAb,OAC1B,yBAAKC,IAAKD,GACLR,EAAY0E,gBAAgBlE,GAAO4D,SAASL,GACzC,yBAAKhH,MAAO,CAACC,QAAS,OAAQ2H,UAAW,QACpCvF,UAAWwF,IAAW,GAAI,CAAC,QAASpE,EAAQ,IAAM,IAAKC,IAAKD,GAE7D,0BAAMpB,UAAWoB,EAAQ,EAAI,gBAAkB,gBAC1ClF,EAAQI,kBAAkB,EAAGJ,EAAQC,iBAAiBgF,EAAW,GAAGG,aAEzE,0BAAMtB,UAAU,aAChB,0BAAMA,UAAS,0BAAqBoB,EAAQ,EAAI,aAAe,KAC5DD,EAAWD,KAAI,SAACK,EAAMC,GAAP,OACZ,0BAAMH,IAAKG,GACP,2BACKD,EAAKA,KAAKwD,cAAcC,SAASL,EAAaI,eAC3C,0BAAMpH,MAAO,CAACsE,gBAAiB,WACpCV,EAAKA,MACE,8BACPA,EAAKA,MACC,WAMd,WC1BpBV,EAAoB4E,IAAMC,gBAC1BhJ,EAAkB+I,IAAMC,gBAEvBjF,IACRkF,WAAU,WACZC,QAAQC,IAAI,aAsBDC,MAlBf,WACI,IAAMpL,EAASqC,aAAY,SAAAlC,GAAK,OAAIA,EAAMJ,YAD/B,EAEqBqG,mBAAS,MAF9B,mBAEJnE,EAFI,KAEMC,EAFN,KAGX,OACI,kBAACF,EAAgBqJ,SAAjB,CAA0B1G,MAAO,CAAC1C,WAAUC,gBACxC,kBAACiE,EAAkBkF,SAAnB,CAA4B1G,MAAOgF,GAC/B,yBAAKrE,UAAU,OAEX,kBAAC,EAAD,CAAUxD,UAAW,oBACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACE9B,EACqB,kBAAC,EAAD,MAAnB,kBAAC,EAAD,UCpBJsL,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCXR,IAAMC,EAAQ5F,IAEd6F,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUH,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,QAE7BlI,SAASsI,eAAe,SDsHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.04bab178.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n    name: \"music\",\n    initialState: {\n        play: false,\n        seconds: 0,\n        second: 0,\n        dSeconds: 0,\n        minutes: 0,\n        timerId: 0,\n        speed: 100,\n        searched: false,\n        search: ''\n    },\n    reducers: {\n        played: (state, action) => {\n            state.play = true\n        },\n        paused: (state, action) => {\n            state.play = false\n        },\n        timer: (state, action) => {\n            if (state.dSeconds >= 999) {\n\n                state.seconds = state.seconds + 1;\n                state.second = state.second + 1\n                state.dSeconds = 0\n            }\n            if (state.second > 59) {\n                state.minutes = state.minutes + 1\n                state.second = 0\n            }\n            state.dSeconds = state.dSeconds + state.speed\n        },\n        timerId: (state, action) => {\n            state.timerId = action.payload\n        },\n        ended: (state, action) => {\n            state.seconds = 0;\n            state.dSeconds = 0;\n        },\n        listened: (state, action) => {\n            if (state.seconds !== action.payload.sec && state.dSeconds !== action.payload.dSec) {\n                state.seconds = action.payload.sec\n                state.dSeconds = Math.floor(action.payload.dSec * 1000)\n            }\n        },\n        set: (state, action) => {\n            state.seconds = action.payload.seco;\n            state.dSeconds = action.payload.dse\n        },\n        forwarded: (state, action) => {\n            state.seconds = state.seconds + 10\n        },\n        rewinded: (state, action) => {\n            state.seconds = state.seconds - 10\n            if (state.seconds < 0) {\n                state.seconds = 0\n            }\n        },\n        speeding: (state, action) => {\n            state.speed = 100 * parseFloat(action.payload)\n        },\n        searching: (state, action) => {\n            state.searched = true\n            state.search = action.payload\n        },\n        cleared: (state, action) => {\n            state.search = ''\n            state.searched = false\n        }\n    }\n})\nexport const {played, paused, timerId, timer, ended, listened, set, forwarded, rewinded, speeding, searching, cleared} = slice.actions;\nexport default slice.reducer;\n","import React from \"react\";\n\nexport default class GenUtil {\n    static getNumericalTime = (time) => {\n        return parseFloat(time.slice(0, time.length - 1))\n    };\n\n    static getFormatDateTime = (minutes, seconds) => {\n        return `${minutes}:${seconds > 9 ? seconds : \"0\" + seconds}`\n    };\n}\n","import React, {useContext, useEffect, useRef} from \"react\";\nimport AudioPlayer from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport * as actions from \"../store/musicRedux\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {DurationContext} from \"../App\";\nimport GenUtil from \"../utils/GenUtil\";\n\nconst MusicSec = ({audioFile}) => {\n    const {duration, setDuration} = useContext(DurationContext)\n    const dispatch = useDispatch();\n    const timer = useSelector((state) => state.timerId);\n    const seconds = useSelector((state) => state.seconds);\n    const dSeconds = useSelector((state) => state.dSeconds);\n    const minutes = useSelector((state) => state.minutes);\n    const time = seconds + dSeconds / 1000;\n    const audioRef = useRef(null);  // reference to react audio player\n\n    //Hook for changing the current time of audio\n    useEffect(() => {\n        audioRef.current.audio.current.currentTime = time;\n    }, [time]);\n\n\n    const durationMinute = Math.floor(duration / 60);\n    const durationSecond = duration % 60\n\n    //Hook for changing the UI of react audio player library\n\n    useEffect(() => {\n\n        let container = audioRef.current.container.current\n        let audio = audioRef.current.audio.current\n        let button = audioRef.current.container.current.childNodes[1].childNodes[1].childNodes[1]\n        container.childNodes[1].childNodes[0].style.display = \"none\"\n        container.childNodes[1].childNodes[1].childNodes[0].style.display = \"none\"\n        container.childNodes[1].childNodes[1].childNodes[2].style.display = \"none\"\n        container.style.outline = \"none\"\n        audio.preload = \"metadata\"\n        audio.onloadedmetadata = () => {\n            setDuration(Math.round(audio.duration))\n        }\n        button.removeChild(button.childNodes[0])\n        button.removeChild(button.childNodes[1])\n\n        /*\n        forward button\n         */\n        let forwardButton = document.createElement(\"div\")\n        let forwardButtonImg = document.createElement(\"img\");\n        forwardButtonImg.src = \"/apollo-audio-assignment/img/rotate-right.svg\"\n        forwardButtonImg.style.width = \"20px\"\n        forwardButton.addEventListener(\"mouseover\", function (event) {\n            event.target.style.cursor = \"pointer\"\n        })\n        forwardButton.appendChild(forwardButtonImg)\n        button.appendChild(forwardButton)\n        forwardButton.onclick = () => dispatch(actions.forwarded())\n\n        /*\n        rewind button\n         */\n        let rewindButton = document.createElement(\"div\")\n        let rewindButtonImg = document.createElement(\"img\");\n        rewindButtonImg.src = \"/apollo-audio-assignment/img/rotate-left.svg\"\n        rewindButtonImg.style.width = \"20px\"\n        rewindButton.addEventListener(\"mouseover\", function (event) {\n            event.target.style.cursor = \"pointer\"\n        })\n        rewindButton.appendChild(rewindButtonImg)\n        button.insertBefore(rewindButton, button.childNodes[0])\n        rewindButton.onclick = () => dispatch(actions.rewinded())\n\n\n        /*\n        speed button\n         */\n        let speedButton = document.createElement(\"select\");\n        speedButton.classList.add(\"downArrow\")\n        const o4 = document.createElement(\"option\")\n        o4.value = \"0.5\";\n        o4.innerText = \"0.50x\"\n        const o = document.createElement(\"option\")\n        o.value = \"1\";\n        o.innerText = \"1.00x\"\n        const o1 = document.createElement(\"option\")\n        o1.value = \"0.75\";\n        o1.innerText = \"0.75x\"\n        const o2 = document.createElement(\"option\")\n        o2.value = \"1.5\"\n        o2.innerText = \"1.50x\"\n        const o3 = document.createElement(\"option\")\n        o3.value = \"2.0\"\n        o3.innerText = \"2.00x\"\n        speedButton.appendChild(o)\n        speedButton.appendChild(o4)\n        speedButton.appendChild(o1)\n        speedButton.appendChild(o2)\n        speedButton.appendChild(o3)\n        speedButton.oninput = (e) => dispatch(actions.speeding(e.target.value))\n        speedButton.addEventListener(\"mouseover\", function (e) {\n            e.target.style.cursor = \"pointer\"\n        })\n        button.appendChild(speedButton)\n\n\n        /*\n        share button\n         */\n        let shareButton = document.createElement(\"img\");\n        shareButton.src = \"/apollo-audio-assignment/img/share.png\"\n        shareButton.addEventListener(\"mouseover\", function (e) {\n            e.target.style.cursor = \"pointer\"\n        })\n        button.parentElement.appendChild(shareButton)\n\n\n        button.childNodes[1].childNodes[0].style.color = \"#2792F7\"\n        button.childNodes[1].style.outline = \"none\"\n        // container.style.backgroundColor=\"#F1F3F4\"\n\n\n    }, [])\n\n    // End of Hook\n\n\n    return (\n        <div className='audio-player-container'>\n            <AudioPlayer\n                src={audioFile}\n                onPlay={() => {\n                    const timerId = setInterval(() => dispatch(actions.timer()), 100);\n                    dispatch(actions.played());\n                    dispatch(actions.timerId(timerId));\n                }}\n                onPause={() => {\n                    clearInterval(timer);\n                    dispatch(actions.paused());\n                }}\n                onEnded={() => {\n                    clearInterval(timer);\n                    dispatch(actions.ended());\n                }}\n\n\n                onListen={(e) => {\n                    dispatch(\n                        actions.listened({\n                            sec: Math.floor(e.target.currentTime),\n                            dSec: e.target.currentTime - Math.floor(e.target.currentTime),\n                        })\n                    )\n                }}\n                ref={audioRef}\n                style={{marginBottom: \"20px\"}}\n            />\n            <span\n                className='time-span'>{GenUtil.getFormatDateTime(minutes, seconds)} / {GenUtil.getFormatDateTime(durationMinute, durationSecond)}</span>\n        </div>\n\n\n    );\n}\n\nexport default MusicSec;\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport reducer from \"./musicRedux\"\n\nexport default function () {\n    return configureStore({reducer})\n}\n","import React, {useContext, useState} from \"react\";\nimport GenUtil from \"../utils/GenUtil\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as actions from \"../store/musicRedux\";\nimport {TranscriptContext} from \"../App\";\n\nconst TranscriptSec = () => {\n    const dispatch = useDispatch();\n    const transcripts = useContext(TranscriptContext)\n\n    const seconds = useSelector((state) => state.seconds);\n    const dSeconds = useSelector((state) => state.dSeconds);\n\n    const time = seconds + dSeconds / 1000;\n    const [share, setShare] = useState(false)\n    const set = () => setShare(false)\n\n    //function for changing the current time of audio with clicking of word\n    const onAudio = (ti) => {\n\n        const s = Math.floor(GenUtil.getNumericalTime(ti));\n        const ds =\n            Math.ceil(\n                (GenUtil.getNumericalTime(ti) - Math.floor(GenUtil.getNumericalTime(ti))) * 10\n            ) * 100;\n        dispatch(actions.set({seco: s, dse: ds}));\n\n        setShare(true)\n        setTimeout(set, 3000)\n    };\n\n\n    return (\n        <div className=\"ml-4 transcript-container\">\n            {transcripts.word_timings.map((personPara, index) => (\n\n                <div className={`transcript-inner-container ${index % 2 ? \"ml-5\" : \"\"}`} key={index}>\n                    <span className={index % 2 ? \"second-person\" : \"first-person\"}>\n                      0:\n                        {Math.floor(GenUtil.getNumericalTime(personPara[0].startTime)) > 9\n                            ? Math.floor(GenUtil.getNumericalTime(personPara[0].startTime))\n                            : \"0\" + Math.floor(GenUtil.getNumericalTime(personPara[0].startTime))}{\" \"}\n                    </span>\n                    <span className='vertical-line-separator'/>\n\n                    <span className={`word-container ${index % 2 ? \"text-muted\" : \"\"}`}>\n                      {personPara.map((word, i) => (\n                          <span onClick={() => onAudio(word.startTime)} key={i}>\n                          {time >= GenUtil.getNumericalTime(word.startTime) &&\n                          time < GenUtil.getNumericalTime(word.endTime) ? (\n                              <a className={\"word\"}>\n                              <span style={{backgroundColor: \"lightblue\"}}>\n                                {word.word}\n                              </span>{\" \"}\n                              </a>\n                          ) : (\n                              <a className=\"word\">\n                                  <span>{word.word}</span>{\" \"}\n                              </a>\n                          )}\n                        </span>\n                      ))}\n\n                        {share ? <div className='share'>share</div> : null}\n                    </span>\n\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default TranscriptSec;\n","export default class Constants {\n    static WidthConstant = 700;\n}\n","import React, {useContext} from \"react\";\nimport GenUtil from \"../utils/GenUtil\";\nimport {DurationContext} from \"../App\";\nimport Constants from \"../constants/Constants\";\nimport {useSelector} from \"react-redux\";\n\nconst WaveLine = (props) => {\n    const getWidth = (startTime, EndTime) => {\n        let s, p;\n        s = GenUtil.getNumericalTime(EndTime) - GenUtil.getNumericalTime(startTime);\n        p = (s / duration) * Constants.WidthConstant;\n        return p + \"px\";\n    };\n    const seconds = useSelector((state) => state.seconds);\n    const dSeconds = useSelector((state) => state.dSeconds);\n\n    const time = seconds + dSeconds / 1000;\n    const {duration, setDuration} = useContext(DurationContext);\n\n    const arr = [1, 2, 3, 4, 5];\n    return (\n        <div\n            className='wave-line-container'\n            style={{\n                maxWidth: getWidth(props.startTime, props.endTime),\n            }}\n        >\n            {arr.map((a, index) => (\n                <span key={index}>\n          {time > (GenUtil.getNumericalTime(props.startTime) + (index / 10))\n              ? (\n                  <div className='gray-bar'\n                       key={a}\n                  />\n              ) : (\n                  <div className='gray-bar'\n                      style={{\n                          borderLeft: `2px solid ${props.colour}`,\n                      }}\n                      key={a}\n                  />\n              )}\n        </span>\n            ))}\n        </div>\n    );\n};\n\nexport default WaveLine;\n","import React, {useContext, useEffect, useState} from 'react';\nimport * as actions from \"../store/musicRedux\";\nimport {DurationContext} from \"../App\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Constants from \"../constants/Constants\";\n\nconst MovingLine = () => {\n    const {duration, setDuration} = useContext(DurationContext);\n    const dispatch = useDispatch();\n\n    const [percent, setPercent] = useState(0);\n\n    const seconds = useSelector((state) => state.seconds);\n    const dSeconds = useSelector((state) => state.dSeconds);\n\n    const time = seconds + dSeconds / 1000;\n\n    useEffect(() => {\n        const percent = (time / duration) * 100;\n        setPercent(percent + \"%\");\n    }, [time]);\n\n\n    const getWaveTime = (e) => {\n        const waveTime = e.nativeEvent.offsetX / Constants.WidthConstant;\n        const audioTime = waveTime * duration;\n        const second = Math.floor(audioTime);\n        const dSecond = Math.round((audioTime - Math.floor(audioTime)) * 10) * 100;\n        dispatch(actions.set({seco: second, dse: dSecond}));\n    };\n    return (\n        <div className='moving-line-container'\n             onClick={getWaveTime}\n        >\n            <div className='moving-line'\n                 style={{\n                     width: percent,\n                 }}\n            />\n        </div>\n    );\n};\n\nexport default MovingLine;\n","import React, {useContext} from \"react\";\nimport {DurationContext, TranscriptContext} from \"../App\";\nimport WaveLine from \"../content/WaveLine\";\nimport GenUtil from \"../utils/GenUtil\";\nimport MovingLine from \"./MovingLine\";\nimport Constants from \"../constants/Constants\";\n\nconst Waveform = () => {\n    const {duration, setDuration} = useContext(DurationContext);\n    const transcripts = useContext(TranscriptContext);\n\n    /*\n        Calculating the static percentages\n      */\n\n    const transcriptLength = transcripts.word_timings.length;\n    let total = 0\n    for (let i = 0; i < transcriptLength; i++) {\n        for (let j = 0; j < transcripts.word_timings[i].length; j++) {\n            total = total + 1\n        }\n    }\n\n    let first = 0\n    for (let m = 0; m < transcriptLength; m++) {\n        if (m % 2 == 0) {\n            for (let n = 0; n < transcripts.word_timings[m].length; n++) {\n                first = first + 1\n            }\n        }\n    }\n\n    const firstPercent = Math.round(\n        (first / total) * 100\n    );\n    const secondPercent = 100 - firstPercent;\n    /*\n    Calculating the margin for the first person's static audio waveline\n     */\n    let memory = 0;\n    const getFirstWavelineMargin = (startTime, endTime) => {\n        let st;\n\n        st = (GenUtil.getNumericalTime(startTime) * Constants.WidthConstant) / duration - memory + 1;\n        memory = (GenUtil.getNumericalTime(endTime) * Constants.WidthConstant) / duration;\n        return st + \"px\";\n    };\n\n    /*\n    Calculating the margin for the second person's static audio waveline\n     */\n    let memory2 = 0;\n    const getSecondWavelineMargin = (startTime, endTime) => {\n        let st;\n\n        st = (GenUtil.getNumericalTime(startTime) * Constants.WidthConstant) / duration - memory2 + 1;\n        memory2 = (GenUtil.getNumericalTime(endTime) * Constants.WidthConstant) / duration;\n        return st + \"px\";\n    };\n\n    return (\n        <div className={\"ml-3 my-5\"} style={{fontSize: \"25px\", width: \"95%\"}}>\n            <div style={{paddingLeft: \"145px\"}}>\n                <span style={{color: \"mediumpurple\", position: \"absolute\", top: \"170px\", left: \"45px\"}}>{firstPercent} % You</span>\n                <span style={{\n                    color: \"blue\",\n                    position: \"absolute\",\n                    top: \"210px\",\n                    left: \"45px\"\n                }}>{secondPercent} % Other</span>\n                {transcripts.word_timings.map((transcript, index) => (\n                    <div key={index}>\n                        {index % 2 == 0 ? (\n                            <div\n                                className={\" first-person\"}\n                                style={{borderBottom: \"1px solid #F1F4F6\", maxWidth: Constants.WidthConstant, display: \"flex\"}}\n                            >\n                                {transcript.map((word, index) => (\n                                    <div\n                                        style={{\n                                            marginLeft: getFirstWavelineMargin(\n                                                word.startTime,\n                                                word.endTime\n                                            ),\n                                            display: \"flex\",\n                                        }}\n                                        key={index}\n                                    >\n                                        <WaveLine\n                                            startTime={word.startTime}\n                                            endTime={word.endTime}\n                                            colour={\"mediumpurple\"}\n                                        />\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                            <div className={\" second-person\"} style={{display: \"flex\"}}>\n                                {transcript.map((word, index) => (\n                                    <div\n                                        style={{\n                                            marginLeft: getSecondWavelineMargin(\n                                                word.startTime,\n                                                word.endTime\n                                            ),\n                                            display: \"flex\",\n                                        }}\n                                        key={index}\n                                    >\n                                        <WaveLine\n                                            startTime={word.startTime}\n                                            endTime={word.endTime}\n                                            colour={\"blue\"}\n                                        />\n                                    </div>\n                                ))}\n                            </div>\n                        )}\n                    </div>\n                ))}\n            </div>\n\n            {/*\n        the block of the moving waveline\n         */}\n            <MovingLine/>\n        </div>\n    );\n};\n\nexport default Waveform;\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport * as actions from \"../store/musicRedux\";\nimport {TranscriptContext} from \"../App\";\n\nconst SearchTranscript = () => {\n    const dispatch = useDispatch();\n    const search = useSelector((state) => state.searched);\n    const [searchValue, setSearchValue] = useState(\"\");\n    const searchString = useSelector((state) => state.search);\n    const transcripts = useContext(TranscriptContext);\n    const [result, setResult] = useState(0);\n\n    useEffect(() => {\n        let result1 = 0;\n        for (let i = 0; i < transcripts.word_timings.length; i++) {\n            for (let j = 0; j < transcripts.word_timings[i].length; j++) {\n                if (transcripts.word_timings[i][j].word.toLowerCase().includes(searchString.toLowerCase())) {\n                    result1 = result1 + 1;\n                }\n            }\n        }\n        setResult(result1);\n    }, [searchString]);\n    return (\n        <div className='search-transcript'>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    dispatch(actions.searching(searchValue.toLowerCase()));\n                }}\n            >\n                <input\n                    className='search-input'\n                    placeholder={\"Search call typescript\"}\n                    onChange={(e) => setSearchValue(e.target.value)}\n                    value={searchValue}\n                />\n            </form>\n            <img\n                className='search-icon'\n                src={\"/apollo-audio-assignment/img/icon-search.png\"}\n            />\n            {search ? (\n                <span className='result-span'>\n          {result} results\n          <span\n              onClick={() => dispatch(actions.cleared())}\n              className='clear-search'\n          >\n            {\" \"}Clear Search\n          </span>\n        </span>\n            ) : null}\n        </div>\n    );\n};\n\nexport default SearchTranscript;\n","import React, {useContext} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {TranscriptContext} from \"../App\";\nimport classnames from \"classnames\";\nimport GenUtil from \"../utils/GenUtil\";\n\nconst SearchedTranscript = () => {\n    const searchString = useSelector(state => state.search)\n    const transcripts = useContext(TranscriptContext);\n\n    return (\n        <div className={\"searched-transcript ml-4\"}>\n            {transcripts.word_timings.map((personPara, index) => (\n                <div key={index}>\n                    {transcripts.transcript_text[index].includes(searchString) ?\n                        <div style={{display: \"flex\", minHeight: \"70px\"}}\n                             className={classnames(\"\", {\"ml-5 \": index % 2 !== 0})} key={index}>\n\n                            <span className={index % 2 ? \"second-person\" : \"first-person\"}>\n                                {GenUtil.getFormatDateTime(0, GenUtil.getNumericalTime(personPara[0].startTime))}\n                            </span>\n                            <span className='gray-box'/>\n                            <span className={`muted-text-span ${index % 2 ? \"text-muted\" : \"\"}`}>\n                              {personPara.map((word, i) => (\n                                  <span key={i}>\n                                      <a>\n                                          {word.word.toLowerCase().includes(searchString.toLowerCase()) ?\n                                              <span style={{backgroundColor: \"orange\"}}>\n                                        {word.word}\n                                      </span> : <span>\n                                        {word.word}\n                                      </span>}{\" \"}\n                                      </a>\n\n                            </span>\n                              ))}\n                            </span>\n                        </div> : null}</div>\n                // :null}\n            ))}\n        </div>\n    );\n};\n\nexport default SearchedTranscript;\n","import React, {useState} from 'react';\nimport './App.scss';\nimport MusicSec from './component/MusicSec'\nimport configureStore from \"./store/configureStore\"\nimport TranscriptSec from \"./component/TranscriptSec\";\nimport Waveform from \"./component/Waveform\";\nimport transcript from \"./transcript/transcript\";\nimport SearchTranscript from \"./component/SearchTranscript\";\nimport {useSelector} from \"react-redux\";\nimport SearchedTranscript from \"./component/SearchedTranscript\";\n\nexport const TranscriptContext = React.createContext()\nexport const DurationContext = React.createContext()\n\nconst store = configureStore();\nstore.subscribe(() => {\n    console.log(\"change\");\n\n})\n\nfunction App() {\n    const search = useSelector(state => state.searched)\n    const [duration, setDuration] = useState(null)\n    return (\n        <DurationContext.Provider value={{duration, setDuration}}>\n            <TranscriptContext.Provider value={transcript}>\n                <div className=\"App\">\n\n                    <MusicSec audioFile={'audio/audio.wav'}/>\n                    <Waveform/>\n                    <SearchTranscript/>\n                    {!search ?\n                        <TranscriptSec/> : <SearchedTranscript/>}\n                </div>\n            </TranscriptContext.Provider></DurationContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport configureStore from \"./store/configureStore\"\n\nconst store = configureStore()\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}> <App/></Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}